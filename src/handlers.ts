import TelegramBot = require('node-telegram-bot-api');
const { config } = require('./config');
const {
  startRegistrationFlow,
  finishRegistration,
  editPolicyMessage,
  sendConfirmationMessage,
} = require('./services');
const { Application } = require('./database');

type UserStates = { [chatId: number]: any };

function registerHandlers(bot: TelegramBot, userStates: UserStates) {
  // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /start ---
  bot.onText(/\/start/, (msg) => {
    startRegistrationFlow(bot, msg.chat.id, userStates);
  });

  // --- –û–°–ù–û–í–ù–û–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ó–ê–ü–û–õ–ù–ï–ù–ò–Ø –ê–ù–ö–ï–¢–´ ---
  bot.on('message', (msg) => {
    // ... —ç—Ç–æ—Ç –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    const chatId = msg.chat.id;
    const state = userStates[chatId];
    if (!state || !state.step) return;
    switch (state.step) {
      case 'awaiting_first_name':
        if (msg.text && msg.text.trim().length > 1) {
          state.data.firstName = msg.text.trim();
          state.step = 'awaiting_last_name';
          bot.sendMessage(chatId, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –§–∞–º–∏–ª–∏—é:');
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è.');
        }
        break;
      case 'awaiting_last_name':
        if (msg.text && msg.text.trim().length > 1) {
          state.data.lastName = msg.text.trim();
          state.step = 'awaiting_phone';
          bot.sendMessage(
            chatId,
            '–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–æ–º.',
            {
              reply_markup: {
                keyboard: [
                  [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
                ],
                one_time_keyboard: true,
                resize_keyboard: true,
              },
            }
          );
        } else {
          bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ñ–∞–º–∏–ª–∏—é.');
        }
        break;
      case 'awaiting_phone':
        if (msg.contact && msg.contact.phone_number) {
          state.data.phone = msg.contact.phone_number;
          state.step = 'awaiting_email';
          bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à Email.', {
            reply_markup: { remove_keyboard: true },
          });
        } else {
          bot.sendMessage(
            chatId,
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º".'
          );
        }
        break;
      case 'awaiting_email':
        if (msg.text && /\S+@\S+\.\S+/.test(msg.text)) {
          state.data.email = msg.text;
          state.step = 'awaiting_product';
          bot.sendMessage(
            chatId,
            'Email –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Ç–∞—Ä–∏—Ñ:',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    {
                      text: '–¢–∞—Ä–∏—Ñ "–°—Ç–∞–Ω–¥–∞—Ä—Ç"',
                      callback_data: 'product_standard',
                    },
                  ],
                  [{ text: '–¢–∞—Ä–∏—Ñ "–ü—Ä–æ—Ñ–∏"', callback_data: 'product_pro' }],
                  [{ text: '–¢–∞—Ä–∏—Ñ "VIP"', callback_data: 'product_vip' }],
                ],
              },
            }
          );
        } else {
          bot.sendMessage(
            chatId,
            '–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
          );
        }
        break;
    }
  });

  // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ù–ê–ñ–ê–¢–ò–ô –ù–ê INLINE-–ö–ù–û–ü–ö–ò ---
  bot.on('callback_query', async (query) => {
    if (!query.data || !query.message) {
      bot.answerCallbackQuery(query.id);
      return;
    }
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const state = userStates[chatId];
    if (!state && !query.data.startsWith('mark_paid_')) {
      bot.answerCallbackQuery(query.id);
      return;
    }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ (—Å–æ–≥–ª–∞—Å–∏—è)
    if (query.data === 'toggle_pd_consent') {
      state.policy.pdConsent = !state.policy.pdConsent;
      bot.answerCallbackQuery(query.id);
      editPolicyMessage(bot, chatId, messageId, userStates);
      return;
    }
    if (query.data === 'toggle_policy_ack') {
      state.policy.policyAck = !state.policy.policyAck;
      bot.answerCallbackQuery(query.id);
      editPolicyMessage(bot, chatId, messageId, userStates);
      return;
    }
    if (query.data === 'continue_to_form') {
      if (state && state.policy.pdConsent && state.policy.policyAck) {
        state.data.newsletter = true;
        state.data.photoConsent = true;
        await bot.deleteMessage(chatId, messageId);
        state.step = 'awaiting_first_name';
        await bot.sendMessage(
          chatId,
          '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º. –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ò–º—è:'
        );
      } else {
        bot.answerCallbackQuery(query.id, {
          text: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–±–∞ –ø—É–Ω–∫—Ç–∞.',
          show_alert: true,
        });
      }
      return;
    }

    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
    if (query.data.startsWith('product_')) {
      if (!state) return;
      state.data.product = query.data.replace('product_', '');
      await bot.deleteMessage(chatId, messageId);
      state.step = 'awaiting_confirmation';
      sendConfirmationMessage(bot, chatId, userStates);
      return;
    }

    // –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    if (query.data === 'confirm_submission') {
      if (!state) return;
      await bot.editMessageText('‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...', {
        chat_id: chatId,
        message_id: messageId,
      });
      await finishRegistration(bot, chatId, userStates);
      return;
    }
    if (query.data === 'start_over') {
      await bot.editMessageText('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ...', {
        chat_id: chatId,
        message_id: messageId,
      });
      startRegistrationFlow(bot, chatId, userStates);
      return;
    }

    // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ —Å –ë–î
    if (query.data.startsWith('mark_paid_')) {
      const parts = query.data.split('_');
      const applicationId = parts[2];

      const application = await Application.findByPk(applicationId);

      if (application) {
        application.set('status', 'paid');
        application.set('paidAt', new Date());
        await application.save();

        bot.editMessageReplyMarkup(
          {
            inline_keyboard: [
              [
                {
                  text: `‚úÖ –û–ø–ª–∞—á–µ–Ω–æ ${new Date().toLocaleDateString()}`,
                  callback_data: 'already_paid',
                },
              ],
            ],
          },
          {
            chat_id: config.adminChatId,
            message_id: messageId,
          }
        );
        bot.answerCallbackQuery(query.id, {
          text: '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ –ë–î!',
        });
        bot.sendMessage(
          application.get('chatId') as number,
          '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–∞–∑—É.'
        );
      } else {
        bot.answerCallbackQuery(query.id, {
          text: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
          show_alert: true,
        });
      }
    }
  });

  // --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ö–û–ú–ê–ù–î–´ /broadcast ---
  bot.onText(/\/broadcast (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const text = match![1];

    if (!config.adminUserIds.includes(chatId)) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    if (!text) {
      bot.sendMessage(
        chatId,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!'
      );
      return;
    }

    const usersToSend = await Application.findAll({
      where: { status: 'paid', newsletterConsent: true },
    });

    if (usersToSend.length === 0) {
      bot.sendMessage(
        chatId,
        '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–∞–≤—à–∏—Ö —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.'
      );
      return;
    }

    let successCount = 0;
    let errorCount = 0;
    bot.sendMessage(
      chatId,
      `–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${usersToSend.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`
    );

    for (const user of usersToSend) {
      try {
        await bot.sendMessage(user.get('chatId') as number, text);
        successCount++;
      } catch (error) {
        console.error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.get('chatId')}:`,
          error
        );
        errorCount++;
      }
    }
    bot.sendMessage(
      chatId,
      `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}`
    );
  });
}

module.exports = { registerHandlers };
