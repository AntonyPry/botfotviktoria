import TelegramBot = require('node-telegram-bot-api');
const { config } = require('./config');
const {
  sendWelcomeMessage,
  sendLegalDocuments,
  sendNewsletterQuestion,
  sendPhotoQuestion,
  finishRegistration,
} = require('./services');
const { Application } = require('./database');

type UserStates = { [chatId: number]: any };

function registerHandlers(bot: TelegramBot, userStates: UserStates) {
  bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    delete userStates[chatId];
    userStates[chatId] = {
      step: 'start',
      data: {},
    };
    sendWelcomeMessage(bot, msg.chat.id);
  });

  bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    const state = userStates[chatId];
    if (!state || !state.step) return;

    const text = msg.text || '';

    switch (state.step) {
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–Ω–∞—á–∞–ª–∞ –∏–º—è, –ø–æ—Ç–æ–º —Ñ–∞–º–∏–ª–∏—é
      case 'awaiting_parent_firstname':
        state.data.parentFirstName = text.trim();
        state.step = 'awaiting_parent_lastname';
        bot.sendMessage(chatId, '–í–∞—à–∞ –§–∞–º–∏–ª–∏—è:');
        break;
      case 'awaiting_parent_lastname':
        state.data.parentLastName = text.trim();
        state.step = 'awaiting_parent_phone';
        bot.sendMessage(
          chatId,
          '–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ):',
          {
            reply_markup: {
              keyboard: [
                [{ text: 'üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º', request_contact: true }],
              ],
              one_time_keyboard: true,
              resize_keyboard: true,
            },
          }
        );
        break;
      case 'awaiting_parent_phone':
        if (msg.contact && msg.contact.phone_number) {
          state.data.parentPhone = msg.contact.phone_number;
        } else {
          state.data.parentPhone = text.trim();
        }
        state.step = 'awaiting_parent_email';
        bot.sendMessage(chatId, '–í–∞—à Email:', {
          reply_markup: { remove_keyboard: true },
        });
        break;
      case 'awaiting_parent_email':
        const emailRegex = /\S+@\S+\.\S+/;
        if (emailRegex.test(text.trim())) {
          state.data.parentEmail = text.trim();
          state.step = 'awaiting_child_firstname';
          bot.sendMessage(chatId, '–ò–º—è –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞:');
        } else {
          bot.sendMessage(
            chatId,
            '–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑.'
          );
        }
        break;
      case 'awaiting_child_firstname':
        state.data.childFirstName = text.trim();
        state.step = 'awaiting_child_lastname';
        bot.sendMessage(chatId, '–§–∞–º–∏–ª–∏—è –í–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞:');
        break;
      case 'awaiting_child_lastname':
        state.data.childLastName = text.trim();
        state.step = 'awaiting_child_age';
        bot.sendMessage(chatId, '–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞:');
        break;
      case 'awaiting_child_age':
        state.data.childAge = text.trim();
        state.step = 'awaiting_child_contact';
        bot.sendMessage(chatId, '–¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ –ù–∏–∫–Ω–µ–π–º —Ä–µ–±–µ–Ω–∫–∞ –≤ Telegram:');
        break;
      case 'awaiting_child_contact':
        state.data.childContact = text.trim();
        state.step = 'awaiting_gadget_opinion';
        bot.sendMessage(
          chatId,
          '–°—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –í—ã, —á—Ç–æ –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫ –∑–∞–≤–∏—Å–∏–º –æ—Ç –≥–∞–¥–∂–µ—Ç–æ–≤?',
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: '–î–∞', callback_data: 'opinion_yes' }],
                [{ text: '–ù–µ—Ç', callback_data: 'opinion_no' }],
                [{ text: '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å', callback_data: 'opinion_dk' }],
              ],
            },
          }
        );
        break;
    }
  });

  bot.on('callback_query', async (query) => {
    if (!query.data || !query.message) {
      bot.answerCallbackQuery(query.id);
      return;
    }
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const state = userStates[chatId];
    if (!state && !query.data.startsWith('mark_paid_')) {
      bot.answerCallbackQuery(query.id);
      return;
    }

    if (query.data === 'start_flow') {
      state.step = 'awaiting_legal_accept';
      sendLegalDocuments(bot, chatId, messageId);
    } else if (query.data === 'legal_accepted') {
      state.step = 'awaiting_newsletter_choice';
      sendNewsletterQuestion(bot, chatId, messageId);
    } else if (
      query.data === 'newsletter_yes' ||
      query.data === 'newsletter_no'
    ) {
      state.data.newsletterConsent = query.data === 'newsletter_yes';
      state.step = 'awaiting_photo_choice';
      sendPhotoQuestion(bot, chatId, messageId);
    } else if (query.data === 'photo_yes' || query.data === 'photo_no') {
      state.data.photoConsent = query.data === 'photo_yes';
      // –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥ –∞–Ω–∫–µ—Ç—ã –∏ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç
      state.step = 'awaiting_parent_firstname';
      await bot.deleteMessage(chatId, messageId);
      await bot.sendMessage(
        chatId,
        '–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –∑–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É.\n\n–í–∞—à–µ –ò–º—è:'
      );
    } else if (query.data.startsWith('opinion_')) {
      const opinions: { [key: string]: string } = {
        opinion_yes: '–î–∞',
        opinion_no: '–ù–µ—Ç',
        opinion_dk: '–ó–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å',
      };
      state.data.gadgetOpinion = opinions[query.data];
      await bot.deleteMessage(chatId, messageId);
      await finishRegistration(bot, chatId, userStates);
    } else if (query.data.startsWith('mark_paid_')) {
      const parts = query.data.split('_');
      const applicationId = parts[2];

      const application = await Application.findByPk(applicationId);

      if (application) {
        application.set('status', 'paid');
        application.set('paidAt', new Date());
        await application.save();

        bot.editMessageReplyMarkup(
          {
            inline_keyboard: [
              [
                {
                  text: `‚úÖ –û–ø–ª–∞—á–µ–Ω–æ ${new Date().toLocaleDateString()}`,
                  callback_data: 'already_paid',
                },
              ],
            ],
          },
          {
            chat_id: config.adminChatId,
            message_id: messageId,
          }
        );

        bot.sendMessage(
          application.get('chatId') as number,
          '‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞. –í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–¥ —Ç—Ä–µ–Ω–∏–Ω–≥–æ–º –Ω–∞–ø—Ä–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏ –≤—Å–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏'
        );
      } else {
        bot.answerCallbackQuery(query.id, {
          text: '–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.',
          show_alert: true,
        });
      }
    }

    bot.answerCallbackQuery(query.id);
  });

  bot.onText(/\/broadcast (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const text = match![1];

    if (!config.adminUserIds.includes(chatId)) {
      bot.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
      return;
    }
    if (!text) {
      bot.sendMessage(
        chatId,
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º!'
      );
      return;
    }

    const usersToSend = await Application.findAll({
      where: { status: 'paid', newsletterConsent: true },
    });

    if (usersToSend.length === 0) {
      bot.sendMessage(
        chatId,
        '–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –¥–∞–≤—à–∏—Ö —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.'
      );
      return;
    }

    let successCount = 0;
    let errorCount = 0;
    bot.sendMessage(
      chatId,
      `–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${usersToSend.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î...`
    );

    for (const user of usersToSend) {
      try {
        await bot.sendMessage(user.get('chatId') as number, text);
        successCount++;
      } catch (error) {
        console.error(
          `–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.get('chatId')}:`,
          error
        );
        errorCount++;
      }
    }
    bot.sendMessage(
      chatId,
      `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${successCount}\n‚ùå –û—à–∏–±–æ–∫: ${errorCount}`
    );
  });
}

module.exports = { registerHandlers };
